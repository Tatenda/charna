import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";

interface YocoPaymentProps {
  amount: number;
  customerInfo: any;
  cartItems: any[];
  onSuccess: (paymentId: string) => void;
  onError: (error: string) => void;
  disabled?: boolean;
}

// Demo component - In production, this would use the official Yoco SDK
// to handle card details securely and generate tokens

const YocoPayment = ({ 
  amount, 
  customerInfo, 
  cartItems, 
  onSuccess, 
  onError, 
  disabled = false 
}: YocoPaymentProps) => {
  const [isProcessing, setIsProcessing] = useState(false);
  const [isReady, setIsReady] = useState(false);
  const { toast } = useToast();
  
  useEffect(() => {
    // In a real implementation, this would initialize the Yoco SDK
    // For demo purposes, we'll simulate the SDK being ready
    const timer = setTimeout(() => {
      setIsReady(true);
    }, 2000);
    
    return () => clearTimeout(timer);
  }, []);

  // Demo function - simulates token generation that would normally be done by Yoco SDK
  const generateDemoToken = () => {
    // In production, this token would be generated by Yoco's secure tokenization service
    // after safely collecting card details through their PCI-compliant forms
    return `demo_token_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  };

  const handlePayment = async () => {
    if (!isReady) {
      onError('Payment system not ready. Please wait and try again.');
      return;
    }

    setIsProcessing(true);

    try {
      // DEMO: In production, this would use Yoco SDK to securely tokenize card details
      // The token would be generated client-side without sending card data to our servers
      const token = generateDemoToken();
      
      // Process payment with token (PCI compliant)
      const paymentResponse = await apiRequest('POST', '/api/payments/charge', {
        token: token,
        amount: amount,
        currency: 'ZAR',
        customerInfo: customerInfo,
        metadata: {
          itemCount: cartItems.length,
          items: cartItems.map(item => ({
            name: item.product.name,
            quantity: item.quantity,
            price: item.product.price
          }))
        }
      });

      const result = await paymentResponse.json();

      if (result.status === 'successful' || result.id) {
        toast({
          title: "Payment Successful!",
          description: "Your payment has been processed successfully.",
        });
        onSuccess(result.id);
      } else {
        onError(result.message || 'Payment failed. Please try again.');
      }

    } catch (error: any) {
      console.error('Payment processing error:', error);
      const errorMessage = error.message || 'Payment processing failed. Please try again.';
      onError(errorMessage);
    } finally {
      setIsProcessing(false);
    }
  };

  return (
    <div className="space-y-6">
      <div className="bg-white rounded-lg border border-gray-200 p-6">
        <div className="flex items-center justify-between mb-4">
          <h3 className="font-heading text-lg font-semibold">Payment Details</h3>
          <div className="flex items-center text-green-600">
            <FontAwesomeIcon icon="shield-alt" className="mr-2" />
            <span className="text-sm font-medium">Secure Payment</span>
          </div>
        </div>

        <div className="space-y-3 text-sm mb-6">
          <div className="flex justify-between">
            <span className="text-neutral">Amount to Pay:</span>
            <span className="font-semibold text-lg">R{amount.toLocaleString()}</span>
          </div>
          <div className="flex justify-between">
            <span className="text-neutral">Payment Method:</span>
            <span className="font-medium">Secure Card Payment</span>
          </div>
          <div className="flex justify-between">
            <span className="text-neutral">Processing:</span>
            <span className="font-medium">PCI Compliant</span>
          </div>
        </div>

        <div className="pt-4 border-t border-gray-100 mb-6">
          <div className="flex flex-wrap gap-2 items-center">
            <FontAwesomeIcon icon={['fab', 'cc-visa']} className="text-xl text-blue-700" />
            <FontAwesomeIcon icon={['fab', 'cc-mastercard']} className="text-xl text-red-600" />
            <FontAwesomeIcon icon={['fab', 'cc-amex']} className="text-xl text-blue-500" />
            <span className="text-xs text-neutral-light">Secure payments powered by Yoco</span>
          </div>
        </div>
        
        {!isReady && (
          <div className="text-center py-4">
            <FontAwesomeIcon icon="spinner" className="animate-spin text-2xl text-primary mb-2" />
            <p className="text-sm text-neutral">Loading secure payment system...</p>
          </div>
        )}
        
        {isReady && (
          <div className="text-center py-8">
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-6 mb-6">
              <FontAwesomeIcon icon="info-circle" className="text-blue-600 text-xl mb-2" />
              <h4 className="font-semibold text-blue-800 mb-2">Demo Payment Integration</h4>
              <p className="text-sm text-blue-700 leading-relaxed">
                This is a demonstration of the Yoco payment integration. In production, 
                this would display Yoco's secure payment form where customers enter their 
                card details safely without our servers ever seeing the sensitive information.
              </p>
            </div>
            
            <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
              <p className="text-sm text-green-700">
                <FontAwesomeIcon icon="check-circle" className="mr-2" />
                PCI Compliant tokenization would happen here
              </p>
            </div>
          </div>
        )}
      </div>

      <Button
        onClick={handlePayment}
        disabled={disabled || isProcessing || !isReady}
        className="w-full btn-primary text-lg py-6"
        data-testid="button-pay-now"
      >
        {isProcessing ? (
          <>
            <FontAwesomeIcon icon="spinner" className="animate-spin mr-2" />
            Processing Payment...
          </>
        ) : !isReady ? (
          <>
            <FontAwesomeIcon icon="spinner" className="animate-spin mr-2" />
            Loading Payment System...
          </>
        ) : (
          <>
            <FontAwesomeIcon icon="credit-card" className="mr-2" />
            Demo Pay R{amount.toLocaleString()} Now
          </>
        )}
      </Button>

      <div className="text-xs text-neutral-light text-center">
        <FontAwesomeIcon icon="lock" className="mr-1" />
        Your payment information is encrypted and secure. 
        Powered by Yoco - South Africa's trusted payment provider.
      </div>
    </div>
  );
};

export default YocoPayment;